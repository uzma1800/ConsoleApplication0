#include <iostream>
#include <omp.h>
#include<stdlib.h>
int main()
{
#define NUM_THREADS 4
	int sum = 0, sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0;
	double start = omp_get_wtime();
	printf("Enter the items in clothing \n");
	//	const int c1 = 50, c2 = 30, c3 = 55, c4 = 100;
	const int c1 = 5, c2 = 6, c3 = 7, c4 = 8;
	int clo[c1];
	printf("Clothing : ");
	for (int i = 0; i <= c1; i++) {
		clo[i] = rand() % 50;
		printf("%d \n", clo[i]);
	}
	printf("grocery ");
	int	gro[c2];
	for (int i = 0; i <= c2; i++) {
		gro[i] = rand() % 50;
		printf("%d \n", gro[i]);

	}
	printf("Stationery ");
	int sta[c3];
	for (int i = 0; i <= c3; i++) {
				sta[i] = rand() % 50;
		//sta[i] = 7;
		printf("%d \n", sta[i]);

	}
	printf("Gaming : ");
	int gam[c4];
	for (int i = 0; i <= c4; i++) {
		gam[i] = rand() % 50;
		printf("%d \n", gam[i]);
	}
#pragma omp parallel firstprivate (sum1, sum2, sum3, sum4)
	{
		for (int i = 0; i <= c1; i++) {
			sum1 += clo[i];

		}
		for (int i = 0; i <= c2; i++) {
			sum2 += gro[i];

		}
		for (int i = 0; i <= c3; i++) {
			sum3 += sta[i];

		}
		for (int i = 0; i <= c4; i++) {
			sum4 += gam[i];
		}


#pragma omp critical
		{

			int sumi = sum1 + sum2 + sum3 + sum4;
			sum += sumi;
			printf(" Thread id  %d, sum1 = %d, sum2 = %d, sum3 = %d, sum4 = %d , threadsum = %d \n", omp_get_thread_num(), sum1, sum2, sum3, sum4, sumi);
		}
	}
	printf("  sum of all thread sums = %d \n", sum);

}


////////////////////
/* NEW CODE
#include<stdio.h>
#include<stdlib.h>
#include<omp.h>
void main() {
    int r,i,ans=0;
    printf("Enter number of sections : ");
    scanf_s("%d",&r);
    int **arr=(int**)malloc(r*sizeof(int*));
    int *size=(int*)malloc(r*sizeof(int));
    omp_set_num_threads(r);
	#pragma omp parallel
    {
        #pragma omp for
        for (i=0;i<r;i++) {
            srand(i);
            int j,sum=0;
            size[i]=rand()%20;
		    arr[i]=(int*)malloc(size[i]*sizeof(int));
		    for (j=0;j<size[i];j++) {
			    arr[i][j]=rand()%100;
                sum+=arr[i][j];
            }
            #pragma omp critical
                ans+=sum;
	    }
    }
    for(i=0;i<r;i++) {
        printf("Section - %2d ( %3d Items ) : ",i,size[i]);
        for(int j=0;j<size[i];j++)
            printf("%3d ",arr[i][j]);
        printf("\n");
    }
    printf("Total Amount : %d",ans);
}
*/

#include <stdlib.h>
#include "mpi.h"
#include <stdio.h>
#define SIZE 16
#define UP    0
#define DOWN  1
#define LEFT  2
#define RIGHT 3

main(int argc, char* argv[]) {
    int numtasks, rank, source, dest, outbuf, i, tag = 1,
        inbuf[4] = { MPI_PROC_NULL,MPI_PROC_NULL,MPI_PROC_NULL,MPI_PROC_NULL, },
        nbrs[4], dims[2] = { 4,4 },
        periods[2] = { 0,0 }, reorder = 0, coords[2];

    MPI_Request reqs[8];
    MPI_Status stats[8];
    MPI_Comm cartcomm;   // required variable

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &numtasks);

    if (numtasks == SIZE) {
        // create cartesian virtual topology, get rank, coordinates, neighbor ranks
        MPI_Cart_create(MPI_COMM_WORLD, 2, dims, periods, reorder, &cartcomm);
        MPI_Comm_rank(cartcomm, &rank);
        MPI_Cart_coords(cartcomm, rank, 2, coords);
        MPI_Cart_shift(cartcomm, 0, 1, &nbrs[UP], &nbrs[DOWN]);
        MPI_Cart_shift(cartcomm, 1, 1, &nbrs[LEFT], &nbrs[RIGHT]);

        printf("rank= %d coords= %d %d  neighbors(u,d,l,r)= %d %d %d %d\n",
            rank, coords[0], coords[1], nbrs[UP], nbrs[DOWN], nbrs[LEFT],
            nbrs[RIGHT]);

        outbuf = rank;

        // exchange data (rank) with 4 neighbors
        for (i = 0; i < 4; i++) {
            dest = nbrs[i];
            source = nbrs[i];
            MPI_Isend(&outbuf, 1, MPI_INT, dest, tag,
                MPI_COMM_WORLD, &reqs[i]);
            MPI_Irecv(&inbuf[i], 1, MPI_INT, source, tag,
                MPI_COMM_WORLD, &reqs[i + 4]);
        }

        MPI_Waitall(8, reqs, stats);

        printf("rank= %d                  inbuf(u,d,l,r)= %d %d %d %d\n",
            rank, inbuf[UP], inbuf[DOWN], inbuf[LEFT], inbuf[RIGHT]);
    }
    else
        printf("Must specify %d processors. Terminating.\n", SIZE);

    MPI_Finalize();
}

Execution:
C:\Users\krish\source\repos\mproc2022>mpiexec -n 16 .\Debug\mproc2022.exe
Output::
C:\Users\krish\source\repos\mproc2022>mpiexec -n 16 .\Debug\mproc2022.exe
rank= 6 coords= 1 2  neighbors(u,d,l,r)= 2 10 5 7
rank= 6                  inbuf(u,d,l,r)= 2 10 5 7
rank= 7 coords= 1 3  neighbors(u,d,l,r)= 3 11 6 -1
rank= 7                  inbuf(u,d,l,r)= 3 11 6 -1
rank= 8 coords= 2 0  neighbors(u,d,l,r)= 4 12 -1 9
rank= 8                  inbuf(u,d,l,r)= 4 12 -1 9
rank= 10 coords= 2 2  neighbors(u,d,l,r)= 6 14 9 11
rank= 10                  inbuf(u,d,l,r)= 6 14 9 11
rank= 12 coords= 3 0  neighbors(u,d,l,r)= 8 -1 -1 13
rank= 12                  inbuf(u,d,l,r)= 8 -1 -1 13
rank= 11 coords= 2 3  neighbors(u,d,l,r)= 7 15 10 -1
rank= 11                  inbuf(u,d,l,r)= 7 15 10 -1
rank= 0 coords= 0 0  neighbors(u,d,l,r)= -1 4 -1 1
rank= 0                  inbuf(u,d,l,r)= -1 4 -1 1
rank= 9 coords= 2 1  neighbors(u,d,l,r)= 5 13 8 10
rank= 9                  inbuf(u,d,l,r)= 5 13 8 10
rank= 13 coords= 3 1  neighbors(u,d,l,r)= 9 -1 12 14
rank= 13                  inbuf(u,d,l,r)= 9 -1 12 14
rank= 15 coords= 3 3  neighbors(u,d,l,r)= 11 -1 14 -1
rank= 15                  inbuf(u,d,l,r)= 11 -1 14 -1
rank= 5 coords= 1 1  neighbors(u,d,l,r)= 1 9 4 6
rank= 5                  inbuf(u,d,l,r)= 1 9 4 6
rank= 2 coords= 0 2  neighbors(u,d,l,r)= -1 6 1 3
rank= 2                  inbuf(u,d,l,r)= -1 6 1 3
rank= 4 coords= 1 0  neighbors(u,d,l,r)= 0 8 -1 5
rank= 4                  inbuf(u,d,l,r)= 0 8 -1 5
rank= 3 coords= 0 3  neighbors(u,d,l,r)= -1 7 2 -1
rank= 3                  inbuf(u,d,l,r)= -1 7 2 -1
rank= 14 coords= 3 2  neighbors(u,d,l,r)= 10 -1 13 15
rank= 14                  inbuf(u,d,l,r)= 10 -1 13 15
rank= 1 coords= 0 1  neighbors(u,d,l,r)= -1 5 0 2
rank= 1                  inbuf(u,d,l,r)= -1 5 0 2


